Plan pour le Parsing de Minishell

------------------------------------------------------------
1. Objectif
------------------------------------------------------------
L'objectif ici est de lire une ligne de commande saisie par l'utilisateur et de la découper (tokeniser) en plusieurs parties (tokens).
Les tokens correspondent aux mots, opérateurs ou arguments qui devront ensuite être analysés pour exécuter la commande.
On doit veiller à gérer correctement les espaces, ainsi que les contenus entre quotes (simples ou doubles) afin de ne pas découper à l'intérieur.

------------------------------------------------------------
2. Méthodologie
------------------------------------------------------------
- Lire la ligne de commande avec readline() (dans la version finale).
- Parcourir la chaîne caractère par caractère.
- Sauter les espaces en début et entre les tokens.
- Lorsqu'une quote est rencontrée (simple ou double), capturer tout le contenu jusqu'à la quote fermante.
- Pour les autres cas, capturer les caractères jusqu'au prochain espace.
- Stocker chaque token dans un tableau de chaînes de caractères (char **).

------------------------------------------------------------
3. Exemple de Code (en C)
------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

// Fonction de tokenisation prenant en compte les quotes
char **tokenize(const char *line) {
    int capacity = 10;
    int count = 0;
    char **tokens = malloc(capacity * sizeof(char *));
    int i = 0;
    while (line[i] != '\0') {
        // Sauter les espaces
        while (line[i] && isspace(line[i]))
            i++;
        if (!line[i])
            break;
        int start = i;
        // Si le token commence par une quote
        if (line[i] == '\'' || line[i] == '\"') {
            char quote = line[i++];
            start = i;
            while (line[i] && line[i] != quote) {
                i++;
            }
            int len = i - start;
            char *token = malloc(len + 1);
            strncpy(token, &line[start], len);
            token[len] = '\0';
            if (line[i] == quote)
                i++;
            // Ajouter le token au tableau
            if (count >= capacity) {
                capacity *= 2;
                tokens = realloc(tokens, capacity * sizeof(char *));
            }
            tokens[count++] = token;
        } else {
            // Token sans quotes : on capture jusqu'au prochain espace
            while (line[i] && !isspace(line[i]))
                i++;
            int len = i - start;
            char *token = malloc(len + 1);
            strncpy(token, &line[start], len);
            token[len] = '\0';
            if (count >= capacity) {
                capacity *= 2;
                tokens = realloc(tokens, capacity * sizeof(char *));
            }
            tokens[count++] = token;
        }
    }
    // Fin du tableau de tokens
    tokens = realloc(tokens, (count + 1) * sizeof(char *));
    tokens[count] = NULL;
    return tokens;
}

int main() {
    // Exemple de ligne de commande à tokeniser
    char line[1024] = "echo \"Hello World\" test 'another test'";
    char **tokens = tokenize(line);
    for (int i = 0; tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
        free(tokens[i]);
    }
    free(tokens);
    return 0;
}

------------------------------------------------------------
4. Remarques
------------------------------------------------------------
- Ce code constitue une base de travail. Dans un Minishell réel, il faudra gérer beaucoup plus de cas, comme les opérateurs (|, <, >, etc.), les redirections, et les erreurs de syntaxe (quotes non fermées).
- Pense à bien libérer la mémoire allouée.
- L'exemple ici se concentre sur la tokenisation simple en gérant uniquement les quotes pour illustrer l'idée de découpage en tokens.

------------------------------------------------------------
5. Prochaines étapes
------------------------------------------------------------
- Intégrer ce parsing dans la lecture globale de la commande.
- Étendre la tokenisation pour inclure les opérateurs et redirections.
- Implémenter une analyse syntaxique (parsing avancé) qui construira une structure de données pour représenter les commandes et leurs relations (pipes, redirections, opérateurs logiques, etc.).

------------------------------------------------------------
Fin du document

Ce fichier te servira de point de départ pour développer et tester ton module de parsing avant de l'intégrer au reste du Minishell.

